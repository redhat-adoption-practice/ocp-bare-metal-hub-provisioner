---
- name: Prepare provisioner host
  hosts: provisioner
  gather_facts: true
  become: true
  tasks:
    - name: Check if SSH key already exists for '{{ user_name }}'
      ansible.builtin.stat:
        path: "/home/{{ user_name }}/.ssh/id_ed25519"
      register: ssh_key_stat

    - name: Ensure user '{{ user_name }}' exists
      ansible.builtin.user:
        name: "{{ user_name }}"
        password: "{{ user_password }}"
        shell: /bin/bash
        createhome: true
      register: user_creation
      when: not ssh_key_stat.stat.exists

    - name: Generate SSH key for user '{{ user_name }}'
      ansible.builtin.user:
        name: "{{ user_name }}"
        generate_ssh_key: true
        ssh_key_type: ed25519
        ssh_key_file: ".ssh/id_ed25519"
      register: ssh_key
      when: not ssh_key_stat.stat.exists and user_creation.changed

    - name: Read SSH public key from file
      ansible.builtin.slurp:
        src: "/home/{{ user_name }}/.ssh/id_ed25519.pub"
      register: ssh_public_key_content

    - name: Decode and print SSH public key
      ansible.builtin.debug:
        msg: "The SSH public key for '{{ user_name }}' is: {{ (ssh_public_key_content['content'] | b64decode).split('\n')[0] }}"

    - name: Add '{{ user_name }}' to sudoers
      ansible.builtin.copy:
        dest: "/etc/sudoers.d/{{ user_name }}"
        content: "{{ user_name }} ALL=(root) NOPASSWD:ALL"
        validate: 'visudo -cf %s'
        mode: '0440'
        owner: root
        group: root

    - name: Configure connected RPM repositories
      ansible.builtin.include_tasks: "include/connected_rpm_repositories.yaml"
      when:
        - not disconnected_installation
        - proxy_enabled

    - name: Configure disconnected RPM repositories
      ansible.builtin.include_tasks: "include/disconnected_rpm_repositories.yaml"
      when:
        - disconnected_installation
        - not proxy_enabled

    - name: Install provisioner host packages
      ansible.builtin.package:
        name: "{{ provisioner_host_packages }}"
        state: installed
      become: true

    - name: Enable and start provisioner host services
      ansible.builtin.service:
        name: "{{ item }}"
        state: started
        enabled: true
      loop: "{{ provisioner_host_services }}"

    - name: Create local directory structure
      ansible.builtin.file:
        dest: "{{ item }}"
        state: directory
        mode: "0755"
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
      loop:
        - "{{ bin_dir }}"
        - "{{ build_dir }}"

    - name: Append '{{ user_name }}' to the libvirt group
      ansible.builtin.user:
        name: "{{ user_name }}"
        groups: libvirt
        append: true

    - name: Gather installed packages information
      ansible.builtin.package_facts:

    - name: Ensure firewalld is started
      ansible.builtin.systemd_service:
        name: firewalld
        state: started
        enabled: true
      when: "'firewalld' in ansible_facts.packages"

    - name: Add HTTP service to the public zone permanently
      ansible.posix.firewalld:
        zone: public
        service: http
        permanent: true
        state: enabled
      when: "'firewalld' in ansible_facts.packages"

    - name: Reload firewalld to apply changes
      ansible.builtin.systemd_service:
        name: firewalld
        state: reloaded
      when: "'firewalld' in ansible_facts.packages"

    - name: Ensure libvirtd is started
      ansible.builtin.systemd_service:
        name: libvirtd
        state: started
        enabled: true
    
    - name: Ensure /var/lib/libvirt/images path exists
      become: true
      ansible.builtin.file:
        path: /var/lib/libvirt/images
        state: directory
        mode: 0755
        owner: root
        group: root

    - name: Check if default pool exists
      become: true
      become_user: "{{ user_name }}"
      ansible.builtin.command:
        cmd: "sudo virsh pool-info default"
      register: pool_check
      ignore_errors: true

    - name: Define a libvirt storage pool
      become: true
      become_user: "{{ user_name }}"
      ansible.builtin.command: "sudo virsh pool-define-as --name default --type dir --target /var/lib/libvirt/images"
      args:
        creates: /etc/libvirt/storage/default.xml
      when: pool_check.rc != 0

    - name: Check if the 'default' virsh pool is active
      become: true
      become_user: "{{ user_name }}"
      ansible.builtin.shell:
        cmd: "set -o pipefail && sudo virsh pool-info default | grep  'State:' | awk -F ':' '{print $2}' | tr -d ' '"
      register: pool_status
      changed_when: false

    - name: Start the 'default' virsh pool
      become: true
      become_user: "{{ user_name }}"
      ansible.builtin.command: 
        cmd: "sudo virsh pool-start default"
      when: pool_status.stdout == 'inactive'

    - name: Set the libvirt storage pool to autostart
      become: true
      become_user: "{{ user_name }}"
      community.libvirt.virt_pool:
        name: default
        autostart: true
 
    - name: Set fact for role_counter
      ansible.builtin.set_fact:
        role_counter: "{{ hostvars | dict2items | selectattr('value.role', 'defined') | map(attribute='value.role') | community.general.counter }}"

    - name: Print out role_counter.master
      ansible.builtin.debug:
        var: role_counter.master
      when: role_counter.master is defined   

    - name: Fetch openshift-install binary
      ansible.builtin.get_url:
        url: "{{ source_urls['installer'] }}"
        dest: "{{ base_dir }}/openshift-baremetal-install"
        mode: "0644"
      environment: "{{ lookup('vars', 'proxy_env') if proxy_enabled else {} }}"

    - name: Fetch openshift client binaries
      ansible.builtin.get_url:
        url: "{{ source_urls['client'] }}"
        dest: "{{ base_dir }}/oc"
        mode: "0644"
      environment: "{{ lookup('vars', 'proxy_env') if proxy_enabled else {} }}"

    - name: Get the default interface
      ansible.builtin.set_fact:
        pub_conn: "{{ ansible_default_ipv4.interface }}"
