---
- name: Prepare provisioner host
  hosts: provisioner
  gather_facts: true
  become: true
  tasks:
    - name: Install provisioner host packages
      ansible.builtin.package:
        name: "{{ item }}"
        state: installed
      with_items: "{{ provisioner_host_packages }}"

    - name: Enable and start provisioner host services
      ansible.builtin.service:
        name: "{{ item }}"
        state: started
        enabled: true
      with_items: "{{ provisioner_host_services }}"

    - name: Create local bin directory
      ansible.builtin.file:
        dest: "{{ bin_dir }}"
        state: directory
        mode: "0755"

    - name: Create local build directory
      ansible.builtin.file:
        dest: "{{ bin_dir }}"
        state: directory
        mode: "0755"

    - name: Run prep tasks for firmware update methods
      ansible.builtin.include_tasks: "include/firmware/{{ fw_module }}/provisioner_host_prep.yaml"
      loop: "{{ enabled_firmware_modules }}"
      loop_control:
        loop_var: fw_module

    - name: Fetch openshift-install binary
      ansible.builtin.get_url:
        url: "{{ source_urls['installer'] }}"
        dest: "{{ base_dir }}/openshift-install-linux.tar.gz"
        mode: "0644"
      environment:
        http_proxy: "{{ proxy_url | default(omit) }}"
        https_proxy: "{{ proxy_url | default(omit) }}"

    - name: Fetch openshift client binaries
      ansible.builtin.get_url:
        url: "{{ source_urls['client'] }}"
        dest: "{{ base_dir }}/openshift-client-linux.tar.gz"
        mode: "0644"
      environment:
        http_proxy: "{{ proxy_url | default(omit) }}"
        https_proxy: "{{ proxy_url | default(omit) }}"

    - name: Extract openshift-install
      ansible.builtin.unarchive:
        creates: "{ {bin_dir }}/openshift-install"
        dest: "{{ bin_dir }}"
        exclude: README.md
        remote_src: true
        src: "{{ base_dir }}/openshift-install-linux.tar.gz"

    - name: Extract openshift clients
      ansible.builtin.unarchive:
        creates: "{{ bin_dir }}/oc"
        dest: "{{ bin_dir }}"
        exclude: README.md
        remote_src: true
        src: "{{ base_dir }}/openshift-client-linux.tar.gz"

    - name: Remove tarballs
      ansible.builtin.file:
        path: "{{ base_dir }}/{{ item }}"
        state: absent
      loop:
        - "openshift-client-linux.tar.gz"
        - "openshift-install-linux.tar.gz"

    - name: Pull coreos-installer image (Docker)
      community.docker.docker_image:
        source: pull
        name: "{{ coreos_installer_image }}"
        state: present
      when: provisioner_host_container_runtime == "docker"
      environment:
        http_proxy: "{{ proxy_url | default(omit) }}"
        https_proxy: "{{ proxy_url | default(omit) }}"

    - name: Pull coreos-installer image (Podman)
      containers.podman.podman_image:
        name: "{{ coreos_installer_image }}"
        state: present
      when: provisioner_host_container_runtime == "podman"
      environment:
        http_proxy: "{{ proxy_url | default(omit) }}"
        https_proxy: "{{ proxy_url | default(omit) }}"

    - name: Pull fcct image (Docker)
      community.docker.docker_image:
        source: pull
        name: "{{ fcct_image }}"
        state: present
      when: provisioner_host_container_runtime == "docker"
      environment:
        http_proxy: "{{ proxy_url | default(omit) }}"
        https_proxy: "{{ proxy_url | default(omit) }}"

    - name: Pull fcct image (Podman)
      containers.podman.podman_image:
        name: "{{ fcct_image }}"
        state: present
      when: provisioner_host_container_runtime == "podman"
      environment:
        http_proxy: "{{ proxy_url | default(omit) }}"
        https_proxy: "{{ proxy_url | default(omit) }}"
