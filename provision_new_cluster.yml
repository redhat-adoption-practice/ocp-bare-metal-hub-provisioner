---
- name: Provision New Cluster
  hosts: provisioner
  gather_facts: true
  vars:
    reprovision: no
  tasks:
    - name: Set up ignition fragment list
      ansible.builtin.set_fact:
        additional_ignition_fragments: []

    - name: Clean up old install directory when reprovisioning
      ansible.builtin.file:
        path: "{{ installer_dir }}"
        state: absent
      when: reprovision == "yes"

    - name: Clean up old files directory when reprovisioning
      ansible.builtin.file:
        path: "{{ files_dir }}"
        state: absent
      when: reprovision == "yes"

    - name: Check if installation config directory exists
      ansible.builtin.stat:
        path: "{{ installer_dir }}"
      register: stat_result

    - name: Fail if conflicting install directory exists
      ansible.builtin.fail:
        msg: "{{ installer_dir }} exists! Remove before creating a new cluster."
      when: stat_result.stat.exists

    - name: Create installation config directory
      ansible.builtin.file:
        path: "{{ installer_dir }}"
        state: directory
        mode: "0755"

    - name: Create installation config directory
      ansible.builtin.file:
        path: "{{ files_dir }}"
        state: directory
        mode: "0755"

    - name: Create install-config.yaml
      ansible.builtin.template:
        src: install-config.yaml.j2
        dest: "{{ files_dir }}/install-config.yaml"
        mode: "0644"

    - name: Create per-cluster webroot
      ansible.builtin.file:
        path: "/var/www/html/{{ cluster_name }}"
        state: directory
        owner: apache
        group: apache
        mode: "0644"
      become: true

    - name: Fetch RHCOS ISO
      ansible.builtin.get_url:
        url: "{{ source_urls['rhcos_live_iso'] }}"
        dest: "{{ files_dir }}/rhcos-base.iso"
        mode: "0644"
      environment:
        http_proxy: "{{ proxy_url | default(omit) }}"
        https_proxy: "{{ proxy_url | default(omit) }}"

    - name: Extract RHCOS ISO if needed(Podman)
      ansible.builtin.shell:
        #!/bin/bash
        podman run \
          --security-opt label=disable \
          --rm \
          -v {{ files_dir }}:/data \
          -w /data {{ coreos_installer_image }} \
          iso extract minimal-iso \
          --output-rootfs rhcos-rootfs.img \
          rhcos-base.iso \
          rhcos-minimal.iso


        chmod 666 {{ files_dir }}/rhcos-minimal.iso
      become: true
      when: source_urls.rhcos_image is not defined

    - name: Fetch RHCOS Root FS if needed
      ansible.builtin.get_url:
        url: "{{ source_urls['rhcos_image'] }}"
        dest: "{{ files_dir }}/rhcos-rootfs.img"
        mode: "0644"
      environment:
        http_proxy: "{{ proxy_url | default(omit) }}"
        https_proxy: "{{ proxy_url | default(omit) }}"
      when: source_urls.rhcos_image is defined

    - name: Symlink rhcos-minimal.iso for pre-4.10
      ansible.builtin.file:
        state: link
        src: "{{ files_dir }}/rhcos-base.iso"
        path: "{{ files_dir }}/rhcos-minimal.iso"
      when: source_urls.rhcos_image is defined

    - name: Copy RHCOS Root FS
      ansible.builtin.copy:
        src: "{{ files_dir }}/rhcos-rootfs.img"
        dest: /var/www/html/{{ cluster_name }}/rhcos-rootfs.img
        owner: apache
        group: apache
        mode: "0644"
      become: true

    - name: Create TLS CA ignition
      ansible.builtin.include_tasks: "include/tls_ignition_patch.yaml"
      when: tls_additional_cas

    - name: Create disk wiping ignition
      ansible.builtin.include_tasks: "include/wipe_disks_patch.yaml"
      when: wipe_disks

    - name: Create installer customization ignition
      ansible.builtin.include_tasks: "include/installer_customization_patch.yaml"
      when: enable_kargs_in_dest and source_urls.rhcos_image is defined

    - name: Compile combined ignition
      ansible.builtin.include_tasks: "include/create_live_ignition.yaml"
      when: additional_ignition_fragments

    - name: Copy install-config
      ansible.builtin.copy:
        src: "{{ files_dir }}/install-config.yaml"
        dest: "{{ installer_dir }}/install-config.yaml"
        mode: "0644"
        remote_src: true

    - name: Create manifests
      ansible.builtin.shell: "{{ bin_dir }}/openshift-install --dir={{ installer_dir }} create manifests"

    - name: Create custom Network Operator config
      ansible.builtin.template:
        src: cluster-network-operator-config.yaml.j2
        dest: "{{ installer_dir }}/manifests/cluster-network-03-config.yml"
        mode: "0644"
      when: customize_network_operator_config

    - name: Configure disk encryption
      ansible.builtin.include_tasks: "include/enable_disk_encryption.yaml"
      when: encrypt_master_disks or encrypt_worker_disks

    - name: Set masters to unschedulable
      ansible.builtin.shell: "sed -i s/true/false/ {{ installer_dir }}/manifests/cluster-scheduler-02-config.yml"

    - name: Create base ignition configs
      ansible.builtin.shell: "{{ bin_dir }}/openshift-install --dir={{ installer_dir }} create ignition-configs"

- name: Build ISOs
  hosts: openshift_nodes
  gather_facts: false
  tasks:
    - name: Gather node information
      ansible.builtin.include_tasks: "include/gather_{{ pm_type }}_facts.yaml"
      when: provision

    - name: Build ISOs
      ansible.builtin.include_tasks: include/coreos_build_iso.yaml
      when: provision

- name: Coy ignition files and upload ISOs
  hosts: provisioner
  gather_facts: true
  tasks:
    - name: Copy ignition files
      ansible.builtin.shell: "cp {{ installer_dir }}/*.ign /var/www/html/{{ cluster_name }} && chown apache:apache /var/www/html/{{ cluster_name }}/*.ign"
      become: true

    - name: Upload ISOs
      ansible.builtin.copy:
        src: "{{ iso_tmp_dir }}/ocp-iso-build/isos"
        dest: /var/www/html/{{ cluster_name }}/boot-isos
        owner: apache
        group: apache
        mode: "0644"
      become: true

- name: Boot nodes
  hosts: openshift_nodes
  gather_facts: false
  tasks:
    - name: Boot nodes
      ansible.builtin.include_tasks: "include/boot_{{ pm_type }}.yaml"
      when: provision

- name: Wait for bootstrap
  hosts: provisioner
  gather_facts: true
  tasks:
    - name: Wait for bootstrap
      ansible.builtin.shell: "{{ bin_dir }}/openshift-install --dir={{ installer_dir }} wait-for bootstrap-complete"
      register: result
      until: result.rc == 0
      retries: 3
      delay: 5

- name: Do post-install node cleanup
  hosts: openshift_nodes
  gather_facts: false
  tasks:
    - name: Do post-install node cleanup
      ansible.builtin.include_tasks: "include/cleanup_{{ pm_type }}.yaml"
      when: provision

- name: Clean up provisioner host
  hosts: provisioner
  gather_facts: true
  tasks:
    - name: Clean up provisioner host
      ansible.builtin.include_tasks: "include/cleanup_provisioner.yaml"

- name: Power off bootstrap node(s)
  hosts: bootstraps
  gather_facts: false
  tasks:
    - name: Power off bootstrap node(s)
      community.vmware.vmware_guest_powerstate:
        hostname: "{{ vcenter_host }}"
        username: "{{ vcenter_user }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        name: "{{ short_name | default(inventory_hostname) }}"
        state: powered-off
        force: true
      delegate_to: localhost
      when: provision
